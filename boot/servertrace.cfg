#!/bin/bash
fs=build/$M3_TARGET-$M3_BUILD/$M3_FS
if [ -z $M3_CLIENTS ]; then
    M3_CLIENTS=1
fi
if [ -z $M3_NUMFS ]; then
    M3_NUMFS=1
fi
if [ -z $M3_KRNLS ]; then
    M3_KRNLS=1
fi
if [ -z $M3_CORES ]; then
    M3_CORES=16
fi
if [ -z $M3_MAXAPPS_PER_KERNEL ]; then
    M3_MAXAPPS_PER_KERNEL=$M3_CORES
fi
if [ -z $M3_REQ_PER_SERVER ]; then
    M3_REQ_PER_SERVER=5
fi

numClients=$M3_CLIENTS
numFS=$M3_NUMFS
numKrnls=$M3_KRNLS
# number of requests per server sent by the load generator
reqPerServer=$M3_REQ_PER_SERVER
# number of servers a load generator can manage
serverPerLoadgen=9

# when to start balancing clients to other kernels if available
clientsPerKrnlBalanceThreshold=160
interKrnlBalanceActive=0
maxAppsPerKernel=$M3_MAXAPPS_PER_KERNEL
pesPerKrnl=$((M3_CORES / numKrnls))
if [ $pesPerKrnl -gt $maxAppsPerKernel ]; then
    pesPerKrnl=$maxAppsPerKernel
fi
pesRemainder=$((M3_CORES - $((pesPerKrnl * numKrnls))))
fsPerKrnl=$((numFS / numKrnls))
fsRemainder=$((numFS - $((fsPerKrnl * numKrnls))))
clientsPerKrnl=$((numClients / numKrnls))
clientsPerKrnlRemainder=$((numClients - $((clientsPerKrnl * numKrnls))))
clientsPerFS=$((numClients / numFS))
clientsPerFSRemainder=$((numClients - $((clientsPerFS * numFS))))
clientsLeft=$numClients

# create kernel args
krnlSeparator="--"
separator="++"
m3fsSize=`stat --format="%s" $fs`
m3fsString1='m3fs '$m3fsSize' '
m3fsString2=' m3fs'
m3fsString3=' daemon'
# example: srvtrace m3fs0 pipe5 /5 requires=m3fs0
appString='srvtrace m3fs'
appString15=' pipe'
appString2=' requires=m3fs'
# example: loadgen 5 pipe6 pipe7 pipe8 requires=pipe6 requires=pipe7 requires=pipe8
loadgenString='loadgen '$reqPerServer' '
loadgenString1='pipe'
loadgenString2=' requires=pipe'
declare -a krnlArgs
declare -ia numKrnlArgs
declare -ia krnlPesAvailable
declare -ia krnlPesUsed
declare -ia krnlToFS
declare -ia krnlsWithFSandFreePes
# how many slots for servers are currently free
declare -ia krnlLoadGenSlots
declare -ia fsToKernel
declare -ia fsSlotsAvailable
declare -ia fsSlotsUsed
declare -ia prefix=0

# distribute PEs between kernels
for i in `seq 0 $((numKrnls - 1))`; do
    krnlPesUsed[$i]=0
    numKrnlArgs[$i]=0
    krnlLoadGenSlots[$i]=0
    krnlPesAvailable[$i]=$((pesPerKrnl - 1))
    if [ $pesRemainder -gt 0 ]; then
        krnlPesAvailable[$i]=$((${krnlPesAvailable[$i]} + 1))
        pesRemainder=$((pesRemainder - 1))
    fi
done

# create client slots for services
for i in `seq 0 $((numFS - 1))`; do
    fsSlotsUsed[$i]=0
done

# distribute services between kernels and create kernel args
nextFS=0
krnlArgs[0]=""

# contains all load generators
krnlArgsLoadgen[0]=""

# contain the current loadgen string that is constructed of two parts
# because it is given the pipes' names and afterwards we have to add the requires=... part
krnlArgsCurrentLoadgenFirst[0]=""
krnlArgsCurrentLoadgenSecond[0]=""

for i in `seq 0 $((numKrnls - 1))`; do
    if [ $i -ne 0 ]; then
        krnlArgs[$i]="kernel"
    fi

    for j in `seq 0 $((fsPerKrnl - 1))`; do
        if [ ${numKrnlArgs[$i]} -gt 0 ]; then
            krnlArgs[$i]="${krnlArgs[$i]} ++"
        fi
        m3fsOffs=$((m3fsSize * nextFS))
        krnlArgs[$i]="${krnlArgs[$i]} $m3fsString1$m3fsOffs$m3fsString2$nextFS$m3fsString3"
        numKrnlArgs[$i]+=1
        fsToKernel[$nextFS]=$i
        krnlPesUsed[$i]+=1
        nextFS=$((nextFS + 1))
    done
done

# distribute remaining services
while [ $fsRemainder -gt 0 ]; do
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ ${numKrnlArgs[$i]} -gt 0 ]; then
            krnlArgs[$i]="${krnlArgs[$i]} ++"
        fi
        m3fsOffs=$((m3fsSize * nextFS))
        krnlArgs[$i]="${krnlArgs[$i]} $m3fsString1$m3fsOffs$m3fsString2$nextFS$m3fsString3"
        numKrnlArgs[$i]+=1
        fsToKernel[$nextFS]=$i
        krnlPesUsed[$i]+=1
        nextFS=$((nextFS + 1))
        fsRemainder=$((fsRemainder - 1))
        if [ $fsRemainder -lt 1 ]; then
            break
        fi
    done
done


declare -i selectedSrv=0
function least_used_service () {
    leastClients=${fsSlotsUsed[0]}
    selectedSrv=0
    for n in `seq 1 $((numFS - 1))`; do
        if [ ${fsSlotsUsed[$n]} -lt $leastClients ]; then
            leastClients=${fsSlotsUsed[$n]}
            selectedSrv=$n
        fi
    done
}

declare -i selectedKrnl=-1
function least_used_kernel () {
    leastUsedPes=1024
    selectedKrnl=-1
    for i in `seq 1 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ] && [ ${krnlPesUsed[$i]} -lt $leastUsedPes ]; then
            leastUsedPes=${krnlPesUsed[$i]}
            selectedKrnl=$i
        fi
    done
    if [ $selectedKrnl -eq -1 ]; then
        echo "ERROR: no free PEs left! Aborting"
        exit
    fi
}

# fill krnlsFree with kernels that still have free PEs
declare -ia krnlsFree
function filter_free_kernels () {
    unset krnlsFree
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ]; then
            krnlsFree+=($i)
        fi
    done
}

# fill servicesOrdered with services ordered by their number of clients
declare -ia servicesOrdered
function services_Ordered() {
    unset servicesOrdered
    # sets selectedSrv to the service with the least clients
    least_used_service
    servicesOrdered+=($selectedSrv)
    lastLeastClients=${fsSlotsUsed[$selectedSrv]}

    for k in `seq 0 $((numFS - 1))`; do
        curLeastClients=$numClients
        curFS=$numFS
        for i in `seq 0 $((numFS - 1))`; do
            if [[ ${fsSlotsUsed[$i]} -lt $lastLeastClients ]]; then
                continue
            fi
            if [[ ${fsSlotsUsed[$i]} -lt $curLeastClients ]]; then
                curLeastClients=${fsSlotsUsed[$i]}
                curFS=$i
            fi
        done
        lastLeastClients=$curLeastClients
        servicesOrdered+=($curFS)
    done
}

# DEPRECATED
# this function is just to check the algorithm's correctness, actually it should never find such a kernel after assigning the remaining clients to local services
function filter_kernels_w_FS_and_free_Pes () {
    unset krnlsWithFSandFreePes
    nextKrnl=0
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ]; then
            for j in `seq 0 $((numFS - 1))`; do
                if [ ${fsToKernel[$j]} -eq $i ]; then
                    krnlsWithFSandFreePes[$nextKrnl]=$i
                    nextKrnl=$((nextKrnl + 1))
                fi
            done
        fi
    done
#     if [ $nextKrnl -ne 0 ]; then
#         echo "WARNING: Found kernel with FS and free PEs. Something went wrong."
#     fi
}

# assign the remaining clients to kernels with services
function apportion_remaining_clients_local() {
# fill servicesOrdered with services ordered by their number of clients
services_Ordered
for i in `seq 0 $((numFS - 1))`; do
    # services with the lowest number of clients
    j=${servicesOrdered[$i]}
    # figure out which kernel hosts the service and if there's still space left
    k=${fsToKernel[$j]}

    # skip kernels with no free load generator slots and just one PE left
    if [[ ${krnlLoadGenSlots[$k]} -eq 0 ]] && [[ ${krnlPesUsed[$k]} -ge $((${krnlPesAvailable[$k]} - 1)) ]]; then
        continue
    fi

    if [[ ${krnlPesUsed[$k]} -lt ${krnlPesAvailable[$k]} ]]; then
        # create new load generator if slots empty
        if [[ ${krnlLoadGenSlots[$k]} -eq 0 ]]; then
            testval=${krnlArgsLoadgen[$k]}
            if [[ -n ${testval// } ]]; then
                krnlArgsLoadgen[$k]="${krnlArgsLoadgen[$k]} ++"
            fi
            krnlArgsLoadgen[$k]="${krnlArgsLoadgen[$k]} ${krnlArgsCurrentLoadgenFirst[$k]} ${krnlArgsCurrentLoadgenSecond[$k]}"
            # reset loadgen string constructors
            krnlArgsCurrentLoadgenFirst[$k]="$loadgenString"
            krnlArgsCurrentLoadgenSecond[$k]=""
            # replenish slots
            krnlLoadGenSlots[$k]=$serverPerLoadgen
            # account one PE for the new loadgen
            krnlPesUsed[$k]+=1
        fi

        krnlArgs[$k]="${krnlArgs[$k]} ++ $appString$j$appString15$prefix /$prefix$appString2$j"
        # inform load generator about it's new server
        krnlArgsCurrentLoadgenFirst[$k]="${krnlArgsCurrentLoadgenFirst[$k]} $loadgenString1$prefix"
        krnlArgsCurrentLoadgenSecond[$k]="${krnlArgsCurrentLoadgenSecond[$k]} $loadgenString2$prefix"
        krnlLoadGenSlots[$k]=$((${krnlLoadGenSlots[$k]} - 1))
        # increment parameters
        fsSlotsUsed[$j]+=1
        krnlPesUsed[$k]+=1
        prefix+=1
        clientsLeft=$((clientsLeft -1))
        numKrnlArgs[$k]=$((${numKrnlArgs[$k]} + 1))
        # necessary?
        clientsPerFSRemainder=$((clientsPerFSRemainder - 1))
        return
    fi
done
}

# assign client to remote service
function apportion_remaining_client_remote() {
    # fills krnlsFree with kernels that still have free PEs
    filter_free_kernels
    numFreeKrnls=${#krnlsFree[@]}
    if [ $numFreeKrnls -eq 0 ]; then
        echo "Too many clients per Kernel, cannot run simulation"
        exit
    fi

    # sets selectedSrv to the service with the least clients
    least_used_service
    j=$selectedSrv
    # sets selectedKrnl to the kernels with the least apps but still having free cores
    least_used_kernel
    k=$selectedKrnl

    # if the least used kernel doesn't have enough space, it just doesn't fit
    if [[ ${krnlLoadGenSlots[$k]} -eq 0 ]] && [[ ${krnlPesUsed[$k]} -ge $((${krnlPesAvailable[$k]} - 1)) ]]; then
        echo "Not enough PEs left, cannot run simulation"
        exit
    fi

    if [[ ${krnlPesUsed[$k]} -lt ${krnlPesAvailable[$k]} ]]; then
        # create new load generator if slots empty
        if [[ ${krnlLoadGenSlots[$k]} -eq 0 ]]; then
            testval=${krnlArgsLoadgen[$k]}
            if [[ -n ${testval// } ]]; then
                krnlArgsLoadgen[$k]="${krnlArgsLoadgen[$k]} ++"
            fi
            krnlArgsLoadgen[$k]="${krnlArgsLoadgen[$k]} ${krnlArgsCurrentLoadgenFirst[$k]} ${krnlArgsCurrentLoadgenSecond[$k]}"
            # reset loadgen string constructors
            krnlArgsCurrentLoadgenFirst[$k]="$loadgenString"
            krnlArgsCurrentLoadgenSecond[$k]=""
            # replenish slots
            krnlLoadGenSlots[$k]=$serverPerLoadgen
            # account one PE for the new loadgen
            krnlPesUsed[$k]+=1
        fi

        krnlArgs[$k]="${krnlArgs[$k]} ++ $appString$j$appString15$prefix /$prefix$appString2$j"
        # inform load generator about it's new server
        krnlArgsCurrentLoadgenFirst[$k]="${krnlArgsCurrentLoadgenFirst[$k]} $loadgenString1$prefix"
        krnlArgsCurrentLoadgenSecond[$k]="${krnlArgsCurrentLoadgenSecond[$k]} $loadgenString2$prefix"
        krnlLoadGenSlots[$k]=$((${krnlLoadGenSlots[$k]} - 1))
        # increment parameters
        fsSlotsUsed[$j]+=1
        krnlPesUsed[$k]+=1
        prefix+=1
        clientsLeft=$((clientsLeft -1))
        numKrnlArgs[$k]=$((${numKrnlArgs[$k]} + 1))
        # necessary?
        clientsPerFSRemainder=$((clientsPerFSRemainder - 1))
        return
    else
        echo "Not enough PEs left, cannot run simulation"
        exit
    fi
}


# try to put clients into the group with their service
for i in `seq 0 $((clientsLeft - 1))`; do
    apportion_remaining_clients_local
done


# # check correctness - a kernel hosting a service should be filled with clients at this point
# if [ $clientsPerFSRemainder -gt 0 ] && [ $interKrnlBalanceActive -eq 0 ]; then
#     filter_kernels_w_FS_and_free_Pes
# fi

# put remaining clients in another group
for i in `seq 0 $((clientsLeft - 1))`; do
    apportion_remaining_client_remote
done


# append load generator string to kernel args
for i in `seq 0 $((numKrnls - 1))`; do
    testval=${krnlArgsCurrentLoadgenSecond[$i]}
    if [[ -n ${testval// } ]]; then
        testval=${krnlArgsLoadgen[$i]}
        if [[ -n ${testval// } ]]; then
            krnlArgsLoadgen[$i]="${krnlArgsLoadgen[$i]} ++"
        fi
        krnlArgsLoadgen[$i]="${krnlArgsLoadgen[$i]} ${krnlArgsCurrentLoadgenFirst[$i]} ${krnlArgsCurrentLoadgenSecond[$i]}"
        # reset loadgen string constructors
        krnlArgsCurrentLoadgenFirst[$i]=""
        krnlArgsCurrentLoadgenSecond[$i]=""
        # replenish slots
        krnlLoadGenSlots[$i]=$serverPerLoadgen
    fi
    testval=${krnlArgsLoadgen[$i]}
    if [[ -n ${testval// } ]]; then
        krnlArgs[$i]="${krnlArgs[$i]} ++ ${krnlArgsLoadgen[$i]}"
    fi

done

# append "pes=" to kernel args
for i in `seq 1 $((numKrnls - 1))`; do
    krnlArgs[$i]="${krnlArgs[$i]} pes=$((${krnlPesAvailable[$i]} + 1))"
done

# output the start configuration
echo "kernel"
for i in `seq 1 $((numKrnls - 1))`; do
    echo ${krnlArgs[$i]}
done

# for the first kernel we have to replace the '++' separators with a newline
while IFS='++' read -ra argsArray; do
    for i in "${argsArray[@]}"; do
        if [ -n "$i" ]; then
            echo $i
        fi
    done
done <<< "${krnlArgs[0]}"
