#!/bin/bash
fs=build/$M3_TARGET-$M3_BUILD/$M3_FS
if [ -z $M3_CLIENTS ]; then
    M3_CLIENTS=1
fi
if [ -z $M3_NUMFS ]; then
    M3_NUMFS=1
fi
if [ -z $M3_KRNLS ]; then
    M3_KRNLS=1
fi
if [ -z $M3_CORES ]; then
    M3_CORES=16
fi
if [ -z $M3_MAXAPPS_PER_KERNEL ]; then
    M3_MAXAPPS_PER_KERNEL=$M3_CORES
fi

numClients=$M3_CLIENTS
numFS=$M3_NUMFS
numKrnls=$M3_KRNLS

# when to start balancing clients to other kernels if available
clientsPerKrnlBalanceThreshold=160
interKrnlBalanceActive=0
maxAppsPerKernel=$M3_MAXAPPS_PER_KERNEL
pesPerKrnl=$((M3_CORES / numKrnls))
if [ $pesPerKrnl -gt $maxAppsPerKernel ]; then
    pesPerKrnl=$maxAppsPerKernel
fi
pesRemainder=$((M3_CORES - $((pesPerKrnl * numKrnls))))
fsPerKrnl=$((numFS / numKrnls))
fsRemainder=$((numFS - $((fsPerKrnl * numKrnls))))
clientsPerKrnl=$((numClients / numKrnls))
clientsPerKrnlRemainder=$((numClients - $((clientsPerKrnl * numKrnls))))
clientsPerFS=$((numClients / numFS))
clientsPerFSRemainder=$((numClients - $((clientsPerFS * numFS))))

# create kernel args
krnlSeparator="--"
separator="++"
m3fsSize=`stat --format="%s" $fs`
m3fsString1='m3fs '$m3fsSize' '
m3fsString2=' m3fs'
m3fsString3=' daemon'
appString='fstrace-m3fs m3fs'
appString2=' requires=m3fs'
declare -a krnlArgs
declare -ia numKrnlArgs
declare -ia krnlPesAvailable
declare -ia krnlPesUsed
declare -ia krnlToFS
declare -ia krnlsWithFSandFreePes
declare -ia fsToKernel
declare -ia fsSlotsAvailable
declare -ia fsSlotsUsed
declare -ia prefix=0

# distribute PEs between kernels
for i in `seq 0 $((numKrnls - 1))`; do
    krnlPesUsed[$i]=0
    numKrnlArgs[$i]=0
    krnlPesAvailable[$i]=$((pesPerKrnl - 1))
    if [ $pesRemainder -gt 0 ]; then
        krnlPesAvailable[$i]=$((${krnlPesAvailable[$i]} + 1))
        pesRemainder=$((pesRemainder - 1))
    fi
done

# create client slots for services
for i in `seq 0 $((numFS - 1))`; do
    fsSlotsUsed[$i]=0
done

# distribute services between kernels and create kernel args
nextFS=0
krnlArgs[0]=""
for i in `seq 0 $((numKrnls - 1))`; do
    if [ $i -ne 0 ]; then
        krnlArgs[$i]="kernel"
    fi

    for j in `seq 0 $((fsPerKrnl - 1))`; do
        if [ ${numKrnlArgs[$i]} -gt 0 ]; then
            krnlArgs[$i]="${krnlArgs[$i]} ++"
        fi
        m3fsOffs=$((m3fsSize * nextFS))
        krnlArgs[$i]="${krnlArgs[$i]} $m3fsString1$m3fsOffs$m3fsString2$nextFS$m3fsString3"
        numKrnlArgs[$i]+=1
        fsToKernel[$nextFS]=$i
        krnlPesUsed[$i]+=1
        nextFS=$((nextFS + 1))
        #krnlToFS[$i]+=($j) # test this: does this create a multidimensional array?
    done
done

# distribute remaining services
while [ $fsRemainder -gt 0 ]; do
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ ${numKrnlArgs[$i]} -gt 0 ]; then
            krnlArgs[$i]="${krnlArgs[$i]} ++"
        fi
        m3fsOffs=$((m3fsSize * nextFS))
        krnlArgs[$i]="${krnlArgs[$i]} $m3fsString1$m3fsOffs$m3fsString2$nextFS$m3fsString3"
        numKrnlArgs[$i]+=1
        fsToKernel[$nextFS]=$i
        krnlPesUsed[$i]+=1
        nextFS=$((nextFS + 1))
        fsRemainder=$((fsRemainder - 1))
        if [ $fsRemainder -lt 1 ]; then
            break
        fi
    done
done

# distribute clients between kernels
for i in `seq 0 $((numKrnls - 1))`; do
    # apportion the first clients to the services
    for j in `seq 0 $((numFS - 1))`; do
        if [ ${fsToKernel[$j]} -eq $i ]; then
            if [ $clientsPerFS -gt 0 ]; then
                # check if there are enough free PEs in that PE group
                if [ ${krnlPesUsed[$i]} -le ${krnlPesAvailable[$i]} ]; then
                    if [ ${numKrnlArgs[$i]} -gt 0 ]; then
                        krnlArgs[$i]="${krnlArgs[$i]} ++"
                    fi

                    if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -ge $clientsPerFS ] && [ $clientsPerFS -le $clientsPerKrnlBalanceThreshold ]; then
                        krnlArgs[$i]="${krnlArgs[$i]} $appString$j /$prefix$appString2$j repeat=$clientsPerFS"
                        prefix=$((prefix + clientsPerFS))
                        numKrnlArgs[$i]+=1
                        krnlPesUsed[$i]+=$clientsPerFS
                        fsSlotsUsed[$j]+=$clientsPerFS
                    else
                        # don't put all clients to one kernel if there are more available and we have less services than kernels
                        if [ $fsPerKrnl -eq 0 ] && [ $clientsPerKrnlBalanceThreshold -le $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) ]; then
                            interKrnlBalanceActive=1
                            leftPEs=$clientsPerKrnlBalanceThreshold
                        else
                            leftPEs=$((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]}))
                        fi
                        krnlArgs[$i]="${krnlArgs[$i]} $appString$j /$prefix$appString2$j repeat=$leftPEs"
                        prefix=$((prefix + leftPEs))
                        numKrnlArgs[$i]+=1
                        krnlPesUsed[$i]+=$leftPEs
                        fsSlotsUsed[$j]+=$leftPEs
                        clientsPerFSRemainder=$((clientsPerFSRemainder + $((clientsPerFS - leftPEs))))
                    fi
                fi
            fi
        fi
    done
done

declare -i selectedSrv=0
function least_used_service () {
    leastClients=${fsSlotsUsed[0]}
    selectedSrv=0
    for n in `seq 1 $((numFS - 1))`; do
        if [ ${fsSlotsUsed[$n]} -lt $leastClients ]; then
            leastClients=${fsSlotsUsed[$n]}
            selectedSrv=$n
        fi
    done
}

declare -i selectedKrnl=-1
function least_used_kernel () {
    leastUsedPes=1024
    selectedKrnl=-1
    for i in `seq 1 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ] && [ ${krnlPesUsed[$i]} -lt $leastUsedPes ]; then
            leastUsedPes=${krnlPesUsed[$i]}
            selectedKrnl=$i
        fi
    done
    if [ $selectedKrnl -eq -1 ]; then
        echo "ERROR: no free PEs left! Aborting"
        exit
    fi
}

# fill krnlsFree with kernels that still have free PEs
declare -ia krnlsFree
function filter_free_kernels () {
    unset krnlsFree
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ]; then
            krnlsFree+=($i)
        fi
    done
}

# fill servicesOrdered with services ordered by their number of clients
declare -ia servicesOrdered
function services_Ordered() {
    unset servicesOrdered
    # sets selectedSrv to the service with the least clients
    least_used_service
    servicesOrdered+=($selectedSrv)
    lastLeastClients=${fsSlotsUsed[$selectedSrv]}

    for k in `seq 0 $((numFS - 1))`; do
        curLeastClients=$numClients
        curFS=$numFS
        for i in `seq 0 $((numFS - 1))`; do
            if [[ ${fsSlotsUsed[$i]} -lt $lastLeastClients ]]; then
                continue
            fi
            if [[ ${fsSlotsUsed[$i]} -lt $curLeastClients ]]; then
                curLeastClients=${fsSlotsUsed[$i]}
                curFS=$i
            fi
        done
        lastLeastClients=$curLeastClients
        servicesOrdered+=($curFS)
    done
}

# DEPRECATED
# this function is just to check the algorithm's correctness, actually it should never find such a kernel after assigning the remaining clients to local services
function filter_kernels_w_FS_and_free_Pes () {
    unset krnlsWithFSandFreePes
    nextKrnl=0
    for i in `seq 0 $((numKrnls - 1))`; do
        if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -gt 0 ]; then
            for j in `seq 0 $((numFS - 1))`; do
                if [ ${fsToKernel[$j]} -eq $i ]; then
                    krnlsWithFSandFreePes[$nextKrnl]=$i
                    nextKrnl=$((nextKrnl + 1))
                fi
            done
        fi
    done
#     if [ $nextKrnl -ne 0 ]; then
#         echo "WARNING: Found kernel with FS and free PEs. Something went wrong."
#     fi
}

# assign the remaining clients to kernels with services
function apportion_remaining_clients_local() {
# fill servicesOrdered with services ordered by their number of clients
services_Ordered
for i in `seq 0 $((numFS - 1))`; do
    # services with the lowest number of clients
    j=${servicesOrdered[$i]}
    # figure out which kernel hosts the service and if there's still space left
    k=${fsToKernel[$j]}
    if [[ ${krnlPesUsed[$k]} -lt ${krnlPesAvailable[$k]} ]]; then
        fsSlotsUsed[$j]+=1
        krnlPesUsed[$k]+=1
        krnlArgs[$k]="${krnlArgs[$k]} ++ $appString$j /$prefix$appString2$j"
        prefix+=1
        numKrnlArgs[$k]=$((${numKrnlArgs[$k]} + 1))
        clientsPerFSRemainder=$((clientsPerFSRemainder - 1))
        return
    fi
done

#     for j in `seq 0 $((numKrnls - 1))`; do
#         if [ ${krnlPesUsed[$j]} -lt ${krnlPesAvailable[$j]} ]; then
#             # figure out which services are in this PE group
#             for k in `seq 0 $((numFS - 1))`; do
#                 if [ ${fsToKernel[$k]} -eq $j ]; then
#                     fsSlotsUsed[$k]+=1
#                     krnlPesUsed[$j]+=1
#                     krnlArgs[$j]="${krnlArgs[$j]} ++ $appString$k /$prefix$appString2$k"
#                     prefix+=1
#                     numKrnlArgs[$j]=$((${numKrnlArgs[$j]} + 1))
#                     clientsPerFSRemainder=$((clientsPerFSRemainder - 1))
#                     return
#                 fi
#             done
#         fi
#     done
}

# assign client to remote service
function apportion_remaining_client_remote() {
    # fills krnlsFree with kernels that still have free PEs
    filter_free_kernels
    numFreeKrnls=${#krnlsFree[@]}
    if [ $numFreeKrnls -eq 0 ]; then
        echo "Too many clients per Kernel, cannot run simulation"
        exit
    fi
    remainingClientsPerKernel=$((clientsPerFSRemainder / numFreeKrnls))
    remainingClientsPerKernelRemainder=$((clientsPerFSRemainder - $((remainingClientsPerKernel * numFreeKrnls))))

    # assign equal amount of clients to each free kernel
    for i in ${krnlsFree[@]}; do
        # sets selectedSrv to the service with the least clients
        least_used_service
        if [ $remainingClientsPerKernel -gt 0 ]; then
            # check if there are enough free PEs in that PE group
            if [ ${krnlPesUsed[$i]} -le ${krnlPesAvailable[$i]} ]; then
                if [ ${numKrnlArgs[$i]} -gt 0 ]; then
                    krnlArgs[$i]="${krnlArgs[$i]} ++"
                fi

                if [ $((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]})) -ge $remainingClientsPerKernel ]; then
                    krnlArgs[$i]="${krnlArgs[$i]} $appString$selectedSrv /$prefix$appString2$selectedSrv repeat=$remainingClientsPerKernel"
                    prefix=$((prefix + remainingClientsPerKernel))
                    numKrnlArgs[$i]+=1
                    krnlPesUsed[$i]+=$remainingClientsPerKernel
                    fsSlotsUsed[$selectedSrv]+=$remainingClientsPerKernel
                    clientsPerFSRemainder=$((clientsPerFSRemainder - remainingClientsPerKernel))
                else
                    leftPEs=$((${krnlPesAvailable[$i]} - ${krnlPesUsed[$i]}))
                    krnlArgs[$i]="${krnlArgs[$i]} $appString$selectedSrv /$prefix$appString2$selectedSrv  repeat=$leftPEs"
                    prefix=$((prefix + leftPEs))
                    numKrnlArgs[$i]+=1
                    krnlPesUsed[$i]+=$leftPEs
                    fsSlotsUsed[$selectedSrv]+=$leftPEs
                    remainingClientsPerKernelRemainder=$((remainingClientsPerKernelRemainder + $((remainingClientsPerKernel - leftPEs))))
                    clientsPerFSRemainder=$((clientsPerFSRemainder - leftPEs))
                fi
            fi
        fi
    done

    # if the number of services is not evenly dividable by the number of kernels there will be services left
    # one of the left over services is assigned now
    if [ $clientsPerFSRemainder -gt 0 ]; then
        # sets selectedSrv to the service with the least clients
        least_used_service
        # sets selectedKrnl to the kernels with the least apps but still having free cores
        least_used_kernel

        fsSlotsUsed[$selectedSrv]+=1
        krnlPesUsed[$selectedKrnl]+=1
        if [ ${numKrnlArgs[$selectedKrnl]} -gt 0 ]; then
            krnlArgs[$selectedKrnl]="${krnlArgs[$selectedKrnl]} ++"
        fi
        krnlArgs[$selectedKrnl]="${krnlArgs[$selectedKrnl]} $appString$selectedSrv /$prefix$appString2$selectedSrv"
        prefix+=1
        numKrnlArgs[$selectedKrnl]=$((${numKrnlArgs[$selectedKrnl]} + 1))
        clientsPerFSRemainder=$((clientsPerFSRemainder - 1))
    fi
}


# try to put clients into the group with their service
if [ $interKrnlBalanceActive -eq 0 ]; then
    for i in `seq 0 $((clientsPerFSRemainder - 1))`; do
        apportion_remaining_clients_local
    done
fi

# check correctness - a kernel hosting a service should be filled with clients at this point
if [ $clientsPerFSRemainder -gt 0 ] && [ $interKrnlBalanceActive -eq 0 ]; then
    filter_kernels_w_FS_and_free_Pes
fi

# put remaining clients in another group
while [ $clientsPerFSRemainder -gt 0 ]; do
    apportion_remaining_client_remote
done

# append pes= to kernel args
for i in `seq 1 $((numKrnls - 1))`; do
    krnlArgs[$i]="${krnlArgs[$i]} pes=$((${krnlPesAvailable[$i]} + 1))"
done

# output the start configuration
echo "kernel"
for i in `seq 1 $((numKrnls - 1))`; do
    echo ${krnlArgs[$i]}
done

# for the first kernel we have to replace the '++' separators with a newline
while IFS='++' read -ra argsArray; do
    for i in "${argsArray[@]}"; do
        if [ -n "$i" ]; then
            echo $i
        fi
    done
done <<< "${krnlArgs[0]}"
